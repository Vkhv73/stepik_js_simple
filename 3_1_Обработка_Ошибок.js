// Синтаксис оператора throw выглядит следующим образом:
//
// throw выражение;
// "выражение" (или результат его вычисления) может представлять из себя практически любой тип данных:
// строку, число, булево значение, объект. Например число, представляющее код ошибки, строку,
// содержащую текст ошибки.

/*
function testFactorial(inputData) {

    if (inputData == 0) {return 1}
    if (inputData < 0)                             // Проверяем - положительное ли число
        throw "Число не должно быть меньше нуля";    // Если отрицательное - "бросаем" исключение

    return (inputData - 1)?(inputData * testFactorial(inputData - 1)):inputData;

}
console.log (testFactorial(-1));

// В этом примере, если на вход функции будет подано число меньше 0,
// то будет сгенерирована ошибка с текстом "Число не должно быть меньше нуля"
// и произойдет выход из функции.
//
// Если ввод корректный, то будет вычислен факториал числа, поданного на вход. */


// Давайте рассмотрим пример с использованием функции factorial(), созданной в течение этого урока.


// Объявление функции
function testFactorial(inputData) {

    if (inputData == 0) {return 1}
    if (inputData < 0)                           // Проверяем - положительное ли число
        throw "Число не должно быть меньше нуля";      // Если отрицательное - "бросаем" исключение
    return (inputData - 1) ? (inputData * testFactorial(inputData - 1)) : inputData;
}

// инициируем переменную для входного параметра, зададим ее вручную в этом примере
var myNumber = -5;

// начало конструкции обработки ошибок
try {
    document.write(testFactorial(myNumber));    //  попытка вызова функции
} catch(ex) {
    document.write(ex); // если в функции произойдет исключение, то будет выведен текст,
// который мы использовали в параметре оператора throw
}

// В этом примере мы не использовали блок finally, он нам тут не нужен.
//Если вы помните, минимум один любой из блоков finally и catch может быть
//использован в конструкции, оба - не обязательно.








function testFactorial(inputData) {

    if (inputData == 0){
        return 1;
    }
    if (inputData < 0){
        throw "Число не должно быть меньше нуля";
    }
    return (inputData - 1) ? (inputData * testFactorial(inputData - 1)) : inputData;
}























